p1<-p1+scale_colour_brewer(name = "")
p2 <- ggplot(Day, aes(x = datetime)) + geom_line(aes(y = ALTE_DA_avg.avg, color = "Day Ahead Daily Average"), size = 1, linetype = 1, alpha = 1)
p2<-p2+geom_line(aes(y = ALTE_DA.min, color = "Day Ahead Daily Minimum"), size = 1, linetype = 1, alpha = 1)
p2<-p2+geom_line(aes(y = ALTE_DA.max, color = "Day Ahead DailyMaximum"), size = 1, linetype = 1, alpha = 1)
p2<-p2+ylab("Prices")+theme(legend.direction = "horizontal", legend.position = "bottom", legend.key = element_blank(),legend.background = element_rect(fill = "white", colour = "gray30"))
p2<-p2+scale_colour_brewer(name = "")
p1
p2
head(df.xts)
p1 <- ggplot(Day, aes(x = datetime)) + geom_line(aes(y = rt.ALTE_RT_avg.avg, color = "Real Time Daily Average"), size = 1, linetype = 1, alpha = 1)
p1<-p1+geom_line(aes(y = rt.ALTE_RT.min, color = "Real Time Daily Minimum"), size = 1, linetype = 1, alpha = 1)
p1<-p1+geom_line(aes(y = rt.ALTE_RT.max, color = "Real Time Daily Maximum"), size = 1, linetype = 1, alpha = 1)
p1<-p1+ylab("Prices")+theme(legend.direction = "horizontal", legend.position = "bottom", legend.key = element_blank(),panel.background = element_rect(fill = "black"),legend.background = element_rect(fill = "white", colour = "gray30"))
p1<-p1+scale_colour_brewer(name = "")
p1
p2 <- ggplot(Day, aes(x = datetime)) + geom_line(aes(y = ALTE_DA_avg.avg, color = "Day Ahead Daily Average"), size = 1, linetype = 1, alpha = 1)
p2<-p2+geom_line(aes(y = ALTE_DA.min, color = "Day Ahead Daily Minimum"), size = 1, linetype = 1, alpha = 1)
p2<-p2+geom_line(aes(y = ALTE_DA.max, color = "Day Ahead DailyMaximum"), size = 1, linetype = 1, alpha = 1)
p2<-p2+ylab("Prices")+theme(panel.background = element_rect(fill = "black"),legend.direction = "horizontal", legend.position = "bottom", legend.key = element_blank(),legend.background = element_rect(fill = "white", colour = "gray30"))
p2<-p2+scale_colour_brewer(name = "")
p2
pricedata<-read.csv(file.choose())
sqrt(c(-1.936, -0.528,0,-0.352,0)^2)
sum(c(-1.936, -0.528,0,-0.352,0)^2)
sum(c(-1.936^2, -0.528^2,0,-0.352^2,0))
sum(c(-1.936, -0.528,0,-0.352,0)^2)
sqrt(sum(c(-1.936, -0.528,0,-0.352,0)^2) )
c(-2.288,-0.176,0, -0.176,0)^2
sum(c(-2.288,-0.176,0, -0.176,0)^2)
sqrt(sum(c(-2.288,-0.176,0, -0.176,0)^2))
v1 = c(-2.288,-0.176,0, -0.176,0)
v2 = c(-1.936, -0.528,0,-0.352,0)
v1*v2
sum(v1*v2)
4.58/(2.03*2.301)
data<-read.csv(file.choose())
head(data)
quantile(data$delta_price_ALTE, c(.10,  .90))
quantile(data$delta_price_ALTE, c(.05,  .95))
data<-read.csv(file.choose())
head(data)
datasummer<-subset(data,data$season="summer")
datasummer<-subset(data,data$season=="summer")
head(datasummer)
plot(hour,datasummer$x.95)
plot(datasummer$hour,datasummer$x.95)
library(ggplot2)
ggplot(datasummer,aes(x=hour,y=x.95)+geom_line()
ggplot(datasummer,aes(x=hour,y=x.95))+geom_line()
ggplot(datasummer,aes(x=hour,y=x.95))+geom_line()
ggplot(datasummer,aes(x=hour,y=x.95))+geom_smooth()
ggplot(datasummer,aes(x=hour,y=x.95))+geom_smooth()+labs(title="Summer")+geom_line(aes(y=x.5))
ggplot(datasummer,aes(x=hour,y=x.95))+labs(title="Summer")+geom_line(aes(y=x.5))++geom_smooth()
ggplot(datasummer,aes(x=hour,y=x.95))+labs(title="Summer")+geom_line(aes(y=x.5))+geom_smooth()
p1<-ggplot(datasummer,aes(x=hour,y=x.95))+labs(title="Summer")+geom_line(aes(y=x.5))
p1
p1<-ggplot(datasummer,aes(x=hour,y=x.95))+geom_line()+labs(title="Summer")+geom_line(aes(y=x.5))
p1
p1+geom_smooth()
p1+geom_smooth()+ylab("Risk")
p1+geom_smooth()+ylab("Delta corresponding to Risk")
melt(datasummer)
library(reshape)
library(melt.data.frame)
library(reshape2)
melt(datasummer)
melt(datasummer[,2:5])
melt(data[,2:5])
newdata<-melt(data[,2:5])
cbind(newdata,c(1:24))
newdataframe<-cbind(newdata,c(1:24))
head(newdataframe)
newdataframe<-cbind(newdata,hour=c(1:24))
head(newdataframe)
head(data)
satasummer<-subset(newdataframe,newdataframe$season=="summer")
datasummer<-subset(newdataframe,newdataframe$season=="summer")
p1<-ggplot(datasummer,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Summer")
p1
p1+geom_smooth()
names(data)<-c("Hour","Season","Minimum","Median","Maximum")
newdata<-melt(data[,2:5])
newdataframe<-cbind(newdata,hour=c(1:24))
datasummer<-subset(newdataframe,newdataframe$season=="summer")
p1<-ggplot(datasummer,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Summer")
p1+geom_smooth()+ylab("Delta corresponding to Risk")
head(datasummer)
head(data)
newdata<-melt(data[,2:5])
newdataframe<-cbind(newdata,hour=c(1:24))
datasummer<-subset(newdataframe,newdataframe$season=="summer")
head(datasummer)
datasummer<-subset(newdataframe,newdataframe$Season=="summer")
head(datasummer)
p1<-ggplot(datasummer,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Summer")
p1+geom_smooth()+ylab("Delta corresponding to Risk")
datawinter<-subset(newdataframe,newdataframe$Season=="winter")
p1<-ggplot(datawinter,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Summer")
p1+geom_smooth()+ylab("Delta corresponding to Risk")
dataspring<-subset(newdataframe,newdataframe$Season=="spring")
p1<-ggplot(dataspring,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Summer")
p1+geom_smooth()+ylab("Delta corresponding to Risk")
#Fall
dataspring<-subset(newdataframe,newdataframe$Season=="fall")
p1<-ggplot(datafall,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Summer")
p1+geom_smooth()+ylab("Delta corresponding to Risk")
datasummer<-subset(newdataframe,newdataframe$Season=="summer")
head(datasummer)
p1<-ggplot(datasummer,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Summer")
p1+geom_smooth()+ylab("Delta corresponding to Risk")
#Winter
datawinter<-subset(newdataframe,newdataframe$Season=="winter")
p1<-ggplot(datawinter,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Winter")
p1+geom_smooth()+ylab("Delta corresponding to Risk")
#Spring
dataspring<-subset(newdataframe,newdataframe$Season=="spring")
p1<-ggplot(dataspring,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Spring")
p1+geom_smooth()+ylab("Delta corresponding to Risk")
#Fall
dataspring<-subset(newdataframe,newdataframe$Season=="fall")
p1<-ggplot(datafall,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Fall")
p1+geom_smooth()+ylab("Delta corresponding to Risk")
#Summer
datasummer<-subset(newdataframe,newdataframe$Season=="summer")
head(datasummer)
p1<-ggplot(datasummer,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Summer")
p1+geom_smooth()+ylab("Delta corresponding to Risk")+xlab("Hour of the Day")
#Winter
datawinter<-subset(newdataframe,newdataframe$Season=="winter")
p1<-ggplot(datawinter,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Winter")
p1+geom_smooth()+ylab("Delta corresponding to Risk")+xlab("Hour of the Day")
#Spring
dataspring<-subset(newdataframe,newdataframe$Season=="spring")
p1<-ggplot(dataspring,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Spring")
p1+geom_smooth()+ylab("Delta corresponding to Risk")+xlab("Hour of the Day")
#Fall
dataspring<-subset(newdataframe,newdataframe$Season=="fall")
p1<-ggplot(datafall,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Fall")
p1+geom_smooth()+ylab("Delta corresponding to Risk")+xlab("Hour of the Day")
p1<-ggplot(datasummer,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Summer")
p1+geom_smooth()+ylab("Delta corresponding to Risk")+xlab("Hour of the Day")+opts(plot.background=theme_rect(fill="grey"),
datasummer<-subset(newdataframe,newdataframe$Season=="summer")
head(datasummer)
p1<-ggplot(datasummer,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Summer")
p1+geom_smooth()+ylab("Delta corresponding to Risk")+xlab("Hour of the Day")+opts(plot.background=theme_rect(fill="grey"),
panel.background=theme_rect(fill='white'))
datasummer<-subset(newdataframe,newdataframe$Season=="summer")
#head(datasummer)
p1<-ggplot(datasummer,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Summer")
p1+geom_smooth()+ylab("Delta corresponding to Risk")+xlab("Hour of the Day")+opts(plot.background=theme_rect(fill="white"),
panel.background=theme_rect(fill='white'))
p1<-ggplot(datasummer,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Summer")
p1<-p1+geom_smooth()+ylab("Delta corresponding to Risk")+xlab("Hour of the Day")
p1<-p1+opts(plot.background=theme_rect(fill="white"),panel.background=theme_rect(fill='white'))
p1+opts(axis.text = theme_text(colour="black"))
datasummer<-subset(newdataframe,newdataframe$Season=="summer")
#head(datasummer)
p1<-ggplot(datasummer,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Summer")
p1<-p1+geom_smooth()+ylab("Delta corresponding to Risk")+xlab("Hour of the Day")
p1<-p1+opts(plot.background=theme_rect(fill="white"),panel.background=theme_rect(fill='grey'))
p1+opts(axis.text = theme_text(colour="black"))
p1<-ggplot(datasummer,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Summer")
p1<-p1+geom_smooth()+ylab("Delta corresponding to Risk")+xlab("Hour of the Day")
p1<-p1+opts(plot.background=theme_rect(fill="grey"),panel.background=theme_rect(fill='white'))
p1+opts(axis.text = theme_text(colour="black"))
datawinter<-subset(newdataframe,newdataframe$Season=="winter")
p1<-ggplot(datawinter,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Winter")
p1<-p1+geom_smooth()+ylab("Delta corresponding to Risk")+xlab("Hour of the Day")
p1<-p1+opts(plot.background=theme_rect(fill="grey"),panel.background=theme_rect(fill='white'))
p1+opts(axis.text = theme_text(colour="black"))
dataspring<-subset(newdataframe,newdataframe$Season=="spring")
p1<-ggplot(dataspring,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Spring")
p1<-p1+geom_smooth()+ylab("Delta corresponding to Risk")+xlab("Hour of the Day")
p1<-p1+opts(plot.background=theme_rect(fill="grey"),panel.background=theme_rect(fill='white'))
p1+opts(axis.text = theme_text(colour="black"))
datafall<-subset(newdataframe,newdataframe$Season=="fall")
p1<-ggplot(datafall,aes(x=hour,y=value,color=variable))+geom_line()+labs(title="Fall")
p1<-p1+geom_smooth()+ylab("Delta corresponding to Risk")+xlab("Hour of the Day")
p1<-p1+opts(plot.background=theme_rect(fill="grey"),panel.background=theme_rect(fill='white'))
p1+opts(axis.text = theme_text(colour="black"))
data<-read.csv(file.choose())
data<-read.csv(file.choose())
head(data)
data$season_hour<-paste(data$Season,data$hour,sep="_")
head(data)
datavalues<-read.csv(file.choose())
head(datavalues)
datavalues$season_hour<-paste(datavalues$Season,datavalues$hour,sep="_")
library(plyr)
plyr1 <- join(data, datavalues, by = "season_hour")
plyr1
head(plyr1)
library(sqldf)
install.packages("sqldf")
library(sqldf)
head(data)
head(datavalues)
datavalues$season_hour<-paste(datavalues$season,datavalues$hour,sep="_")
sqldf1 <- sqldf("SELECT data.season_hour, datavalues.
FROM data
LEFT JOIN datavalues
ON data.season_hour = datavalues.season_hour")
head(datavalues)
plyr1 <- join(data, datavalues, by = "season_hour")
head(plyr1)
head(datawinter)
nrwo(plyr1)
nrow(plyr1)
nrow(data)
unique(plyr1$x.5)
4*24
finaldata <- join(data, datavalues, by = "season_hour")
finaldata$error<-finaldata$forecast-finaldata$normalized_quantities
summary(finaldata$error)
summary(finaldata$forecast)
summary(finaldata$normalized_quantities)
tail(finaldata)
table(finaldata$forecast)
table(table(finaldata$forecast))
finaldata$forecast[is.na(finaldata$forecast)]
finaldata$forecast[which(is.na(finaldata$forecast))]
finaldata$forecast[which.na(finaldata$forecast))]
which.na(finaldata$forecast)
finaldata$forecast[is.na(finaldata$forecast)]
which(finaldata$forecast[is.na(finaldata$forecast)])
which(finaldata$forecast == NA)
nas<-is.na(finaldata$forecast)
which(nas)
summary(finaldata$error)
head(finaldata)
finaldata$score<-if(finaldata$error > 0, finaldata$error * finaldata$x.95,finaldata$error * (1-finaldata$x.95))
finaldata$score<-ifelse(finaldata$error > 0, finaldata$error * finaldata$x.95,finaldata$error * (1-finaldata$x.95))
head(finaldata)
x<-c(1,2,3,4,5,-1,1)
y<-c(1,2,3,4,5,-1,1)
z<-if(x >0 and y >0,x+y,x-y)
z<-ifelse(x >0 and y >0,x+y,x-y)
z<-ifelse(x >0 &&y >0,x+y,x-y)
z
example<-data.frame(x,y)
z<-ifelse(example$x >0 &&example$y >0,example$x+example$y,example$x-example$y)
z
example$z<-ifelse(example$x >0 &&example$y >0,example$x+example$y,example$x-example$y)
head(example)
example$z<-ifelse(example$x >0 &example$y >0,example$x+example$y,example$x-example$y)
head(example)
example
x<-c(1,2,3,4,-5,-1,1)
y<-c(1,2,3,4,5,-1,1)
example<-data.frame(x,y)
example$z<-ifelse(example$x >0 &example$y >0,example$x+example$y,example$x-example$y)
example
tail(finaldata)
install.packages("pspline")
data<-read.csv(file.choose())
head(data)
sm.spline(data$hour,data$x.5)
loess(data$x.5 ~ data$hour, data=data)
lows<-loess(data$x.5 ~ data$hour, data=data)
lows$fitted
head(data)
nrow(data)
plot(data$x.5 ~ data$hour, data=data,pch=19,cex=0.1)
lows <- with(data[data$season=="fall",], loess(data$x.5 ~ data$hour, data=data))
lows$fitted
lows <- by(data,data[,"season"], loess(data$x.5 ~ data$hour, data=data))
lows <- by(data,data[,"season"],function(x) loess(data$x.5 ~ data$hour, data=x))
lows$fitted
lows
lows <- by(data,data[,"season"],function(x) loess(x.5 ~ hour, data=x))
lows
lows$fitted
sapply(lows, coef)
lows <- by(data,data[,"season"],function(x) loess(x.5 ~ hour, data=x))
lows
attributes(lows)
lows
attributes(lows)
str(lows)
lows$fall$fitted
data.frame(lows$fall$fitted,"fall")
fallfitted<-data.frame(lows$fall$fitted,"fall")
summerfitted<-data.frame(lows$summer$fitted,"summer")
springfitted<-data.frame(lows$spring$fitted,"spring")
winterfitted<-data.frame(lows$winter$fitted,"winter")
rbind(fallfitted, summerfitted, springfitted, winterfitted)
ldply(list(fallfitted, summerfitted, springfitted, winterfitted),data.frame)
fallfitted<-data.frame(fitted=lows$fall$fitted,"fall")
fallfitted
fallfitted<-data.frame(fitted_minimum=lows$fall$fitted,season="fall")
summerfitted<-data.frame(fitted_minimum=lows$summer$fitted,season="summer")
springfitted<-data.frame(fitted_minimum=lows$spring$fitted,season="spring")
winterfitted<-data.frame(fitted_minimum=lows$winter$fitted,season="winter")
ldply(list(fallfitted, summerfitted, springfitted, winterfitted),data.frame)
lows <- by(data,data[,"season"],function(x) loess(x.95 ~ hour, data=x))
fallfitted<-data.frame(fitted_maximum=lows$fall$fitted,season="fall")
summerfitted<-data.frame(fitted_maximum=lows$summer$fitted,season="summer")
springfitted<-data.frame(fitted_maximum=lows$spring$fitted,season="spring")
winterfitted<-data.frame(fitted_maximum=lows$winter$fitted,season="winter")
fitteddata<-ldply(list(fallfitted, summerfitted, springfitted, winterfitted),data.frame)
fallfitted<-data.frame(fitted_minimum=lows$fall$fitted,season="fall")
summerfitted<-data.frame(fitted_minimum=lows$summer$fitted,season="summer")
springfitted<-data.frame(fitted_minimum=lows$spring$fitted,season="spring")
winterfitted<-data.frame(fitted_minimum=lows$winter$fitted,season="winter")
fitteddatamin<-ldply(list(fallfitted, summerfitted, springfitted, winterfitted),data.frame)
lows <- by(data,data[,"season"],function(x) loess(x.95 ~ hour, data=x))
fallfitted<-data.frame(fitted_maximum=lows$fall$fitted,season="fall")
summerfitted<-data.frame(fitted_maximum=lows$summer$fitted,season="summer")
springfitted<-data.frame(fitted_maximum=lows$spring$fitted,season="spring")
winterfitted<-data.frame(fitted_maximum=lows$winter$fitted,season="winter")
fitteddatamax<-ldply(list(fallfitted, summerfitted, springfitted, winterfitted),data.frame)
fitteddata<-cbind(fitteddatamax,fitteddatamin)
head(fitteddata)
fitteddata<-merge(fitteddatamax,fitteddatamin)
head(fitteddata)
nrow(fitteddata)
fitteddata<-cbind(fitteddatamax,fitteddatamin)
head(datavalues)
head(fitteddata)
datavalues<-data.frame(fitteddata,c(1:24))
head(datavalues)
datavalues$season.1<-NULL
data <- read.csv(file.choose())
lows <- by(data,data[,"season"],function(x) loess(x.5 ~ hour, data=x))
fallfitted<-data.frame(fitted_minimum=lows$fall$fitted,season="fall")
summerfitted<-data.frame(fitted_minimum=lows$summer$fitted,season="summer")
springfitted<-data.frame(fitted_minimum=lows$spring$fitted,season="spring")
winterfitted<-data.frame(fitted_minimum=lows$winter$fitted,season="winter")
fitteddatamin<-ldply(list(fallfitted, summerfitted, springfitted, winterfitted),data.frame)
lows <- by(data,data[,"season"],function(x) loess(x.95 ~ hour, data=x))
fallfitted<-data.frame(fitted_maximum=lows$fall$fitted,season="fall")
summerfitted<-data.frame(fitted_maximum=lows$summer$fitted,season="summer")
springfitted<-data.frame(fitted_maximum=lows$spring$fitted,season="spring")
winterfitted<-data.frame(fitted_maximum=lows$winter$fitted,season="winter")
fitteddatamax<-ldply(list(fallfitted, summerfitted, springfitted, winterfitted),data.frame)
fitteddata<-cbind(fitteddatamax,fitteddatamin)
head(fitteddata)
fitteddata<-cbind(fitteddatamax,fitteddatamin,fitteddatamedian)
lows <- by(data,data[,"season"],function(x) loess(x.50 ~ hour, data=x))
fallfitted<-data.frame(fitted_median=lows$fall$fitted,season="fall")
summerfitted<-data.frame(fitted_median=lows$summer$fitted,season="summer")
springfitted<-data.frame(fitted_median=lows$spring$fitted,season="spring")
winterfitted<-data.frame(fitted_median=lows$winter$fitted,season="winter")
fitteddatamedian<-ldply(list(fallfitted, summerfitted, springfitted, winterfitted),data.frame)
fitteddata<-cbind(fitteddatamax,fitteddatamin,fitteddatamedian)
head(fitteddata)
fitteddata$season<-NULL
head(fitteddata$season)
head(fitteddata)
fitteddata$season<-NULL
head(fitteddata)
plot.ts(fitteddata$fitted_maximum)
datavalues<-data.frame(fitteddata,hour=c(1:24))
datavalues$season_hour<-paste(datavalues$season,datavalues$hour,sep="_")
data<-read.csv(file.choose())
head(data)
data<-read.csv(file.choose())
data$season_hour<-paste(data$Season,data$hour,sep="_")
head(data)
library(plyr)
finaldata <- join(data, datavalues, by = "season_hour")
finaldata$error<-finaldata$forecast-finaldata$normalized_quantities
summary(finaldata$error)
finaldata$score<-ifelse(finaldata$error > 0 & finaldata$delta_price_ALTE > 0,
finaldata$error * finaldata$fitted_maximum,
ifelse( finaldata$error < 0 & finaldata$delta_price_ALTE > 0,finaldata$error,
ifelse(finaldata$error < 0 & finaldata$delta_price_ALTE < 0,finaldata$error * finaldata$fitted_minimum,finaldata$error)))
plot.ts(finaldata$score)
finaldata$score<-ifelse(finaldata$error > 0 & finaldata$delta_price_ALTE > 0,
finaldata$error * finaldata$fitted_maximum,
ifelse( finaldata$error < 0 & finaldata$delta_price_ALTE > 0,finaldata$error,
ifelse(finaldata$error < 0 & finaldata$delta_price_ALTE < 0,finaldata$error * finaldata$fitted_minimum,finaldata$error)))
plot.ts(finaldata$score)
head(finaldata)
plot(finaldata$date2,finaldata$score)
str(finaldata$date2)
finaldata$datetime<-strptime(finaldata$date2, "%Y-%m-%d %H")
plot(finaldata$datetime,finaldata$score)
str(finaldata$datetime)
write.csv(finaldata,"/media/deeksha/e/Deeksha/Dropbox/Coursework/PracticumII/data/finaldata.csv")
ggplot(finaldata, aes(x = datetime,y=score)+geom_line()
)
ggplot(finaldata, aes(x = datetime,y=score))+geom_line()
edit_distance("larch","patch")
agrep("larch","patch")
adist("larch","patch")
#1c
w<-10
a<-2
c<-seq(.1,.5,0.01)
a2<-a^2
happiness<- -exp(-(w-c*(a2)))
data<-data.frame(c,happiness)
p1<-ggplot(data,aes(x=c,y=happiness))+geom_line()
p1<-p1+opts(plot.background=theme_rect(fill="grey"),panel.background=theme_rect(fill='white'))
p1+opts(axis.text = theme_text(colour="black"))+xlab("Dislike working hard")+ylab("Happiness")
library(ggplot2)
w<-10
a<-2
c<-seq(.1,.5,0.01)
a2<-a^2
happiness<- -exp(-(w-c*(a2)))
data<-data.frame(c,happiness)
p1<-ggplot(data,aes(x=c,y=happiness))+geom_line()
p1<-p1+opts(plot.background=theme_rect(fill="grey"),panel.background=theme_rect(fill='white'))
p1+opts(axis.text = theme_text(colour="black"))+xlab("Dislike working hard")+ylab("Happiness")
w<-10
a<-2
c<-seq(.1,1,0.01)
a2<-a^2
happiness<- -exp(-(w-c*(a2)))
data<-data.frame(c,happiness)
p1<-ggplot(data,aes(x=c,y=happiness))+geom_line()
p1<-p1+opts(plot.background=theme_rect(fill="grey"),panel.background=theme_rect(fill='white'))
p1+opts(axis.text = theme_text(colour="black"))+xlab("Dislike working hard")+ylab("Happiness")
w<-10
c<-0.5
a<- seq(1,5,0.01)
a2<-a^2
solve<--(w-c*(a2))
happiness<- -exp(solve)
data<-data.frame(a,happiness)
plot(a,happiness)
p1<-ggplot(data,aes(x=a,y=happiness))+geom_line()+ylim(-100000,0)
p1<-p1+opts(plot.background=theme_rect(fill="grey"),panel.background=theme_rect(fill='white'))
p1+opts(axis.text = theme_text(colour="black"))+xlab("Effort")+ylab("Happiness")
w<-10
c<-1
a<- seq(1,5,0.01)
a2<-a^2
solve<--(w-c*(a2))
happiness<- -exp(solve)
data<-data.frame(a,happiness)
plot(a,happiness)
p1<-ggplot(data,aes(x=a,y=happiness))+geom_line()+ylim(-100000,0)
p1<-p1+opts(plot.background=theme_rect(fill="grey"),panel.background=theme_rect(fill='white'))
p1+opts(axis.text = theme_text(colour="black"))+xlab("Effort")+ylab("Happiness")
w<-10
c<-.5
a<- seq(1,5,0.01)
a2<-a^2
solve<--(w-c*(a2))
happiness<- -exp(solve)
data<-data.frame(a,happiness)
plot(a,happiness)
p1<-ggplot(data,aes(x=a,y=happiness))+geom_line()+ylim(-100000,0)
p1<-p1+opts(plot.background=theme_rect(fill="grey"),panel.background=theme_rect(fill='white'))
p1+opts(axis.text = theme_text(colour="black"))+xlab("Effort")+ylab("Happiness")
w<-10
c<-.1
a<- seq(1,5,0.01)
a2<-a^2
solve<--(w-c*(a2))
happiness<- -exp(solve)
data<-data.frame(a,happiness)
plot(a,happiness)
p1<-ggplot(data,aes(x=a,y=happiness))+geom_line()+ylim(-100000,0)
p1<-p1+opts(plot.background=theme_rect(fill="grey"),panel.background=theme_rect(fill='white'))
p1+opts(axis.text = theme_text(colour="black"))+xlab("Effort")+ylab("Happiness")
save(sickTweets, file="rdmTweets.RData")
require(twitteR)
require(wordcloud)
require(igraph)
require(tm)
require(SnowballC)
load("CloroxWipesTweets.RData")
load("/media/deeksha/e/Deeksha/Dropbox/Coursework/PracticumIII/Code/CloroxWipesTweets.RData")
(nDocs <- length(CloroxWipesTweets))
(nDocs <- length(sickTweets))
load("/media/deeksha/e/Deeksha/Dropbox/Coursework/PracticumIII/Code/CloroxTweets.RData")
load("/media/deeksha/e/Deeksha/Dropbox/Coursework/PracticumIII/Code/CloroxTweets.RData")
load("/media/deeksha/e/Deeksha/Dropbox/Coursework/PracticumIII/Code/CloroxTweets.RData")
setwd("/home/deeksha/github/msan622/homework2")
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
